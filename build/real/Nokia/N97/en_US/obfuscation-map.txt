Wordifi -> Wordifi:
    javax.microedition.rms.RecordStore names -> names
    javax.microedition.rms.RecordStore numbers -> numbers
    javax.microedition.rms.RecordStore both -> both
    int score -> score
    int time -> time
    int multiplier -> multiplier
    int acc1 -> acc1
    int acc2 -> acc2
    int acc -> acc
    int high1 -> high1
    int high2 -> high2
    int high3 -> high3
    int high4 -> high4
    int lowest -> lowest
    java.lang.String letterOf -> letterOf
    java.lang.String check -> check
    java.lang.String questionString -> questionString
    java.lang.String question -> question
    java.lang.String knA -> knA
    java.lang.String wS -> wS
    java.lang.String highn1 -> highn1
    java.lang.String highn2 -> highn2
    java.lang.String highn3 -> highn3
    java.lang.String highn4 -> highn4
    java.lang.String highn5 -> highn5
    java.lang.String newHigh -> newHigh
    de.enough.polish.ui.Form gameForm -> gameForm
    de.enough.polish.ui.Form aboutForm -> aboutForm
    de.enough.polish.ui.Form welcomeForm -> welcomeForm
    de.enough.polish.ui.Form instructionForm -> instructionForm
    de.enough.polish.ui.Form highForm -> highForm
    de.enough.polish.ui.Form highScoreForm -> highScoreForm
    de.enough.polish.ui.List scoreList -> scoreList
    de.enough.polish.ui.List menuList -> menuList
    de.enough.polish.ui.List levelList -> levelList
    de.enough.polish.ui.Command exit -> exit
    de.enough.polish.ui.Command skip -> skip
    de.enough.polish.ui.Command back -> back
    de.enough.polish.ui.Command cont -> cont
    de.enough.polish.ui.Command yes -> yes
    de.enough.polish.ui.Command no -> no
    de.enough.polish.ui.Command mainMenu -> mainMenu
    de.enough.polish.ui.Command playAgain -> playAgain
    de.enough.polish.ui.Alert quitGameAlert -> quitGameAlert
    de.enough.polish.ui.Alert exitAppAlert -> exitAppAlert
    de.enough.polish.ui.Alert doneAlert -> doneAlert
    de.enough.polish.ui.TextField answer -> answer
    de.enough.polish.ui.TextField highField -> highField
    java.util.Timer timer -> timer
    java.util.Timer w -> w
    java.util.TimerTask tick -> tick
    java.util.TimerTask end -> end
    java.util.TimerTask ww -> ww
    de.enough.polish.ui.Display display -> display
    java.lang.String[] words -> words
    java.lang.String[] level3 -> level3
    java.lang.String[] level2 -> level2
    java.lang.String[] level1 -> level1
    java.lang.String[] levelx -> levelx
    javax.microedition.rms.RecordStore rs -> rs
    void startApp() -> startApp
    void pauseApp() -> pauseApp
    void destroyApp(boolean) -> destroyApp
    de.enough.polish.ui.Alert getExitAppAlert() -> getExitAppAlert
    de.enough.polish.ui.Alert getQuitGameAlert() -> getQuitGameAlert
    de.enough.polish.ui.Alert getDoneAlert() -> getDoneAlert
    void createTimer() -> createTimer
    void startTimer(java.util.Timer) -> startTimer
    de.enough.polish.ui.Form getWelcomeForm() -> getWelcomeForm
    void makeWord() -> makeWord
    de.enough.polish.ui.List getMenuList() -> getMenuList
    de.enough.polish.ui.Form getHighScoreForm() -> getHighScoreForm
    de.enough.polish.ui.Form getHighForm() -> getHighForm
    void makeNewHigh() -> makeNewHigh
    de.enough.polish.ui.List getLevelList() -> getLevelList
    de.enough.polish.ui.Form getGameForm() -> getGameForm
    int getAnswer() -> getAnswer
    int mult() -> mult
    int score() -> score
    de.enough.polish.ui.Form getAboutForm() -> getAboutForm
    de.enough.polish.ui.Form getInstructionForm() -> getInstructionForm
    de.enough.polish.ui.List getScoreSheet() -> getScoreSheet
    int checkWord() -> checkWord
    void nextForm() -> nextForm
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
    void startRecords() -> startRecords
    void refreshSettings() -> refreshSettings
    void changeSettings() -> changeSettings
    void finishOff(int) -> finishOff
    java.lang.String getSpaces(int) -> getSpaces
Wordifi$1 -> i:
    Wordifi this$0 -> a
    void run() -> run
Wordifi$2 -> k:
    Wordifi this$0 -> a
    void run() -> run
Wordifi$3 -> j:
    Wordifi this$0 -> a
    void run() -> run
de.enough.polish.midp.ui.NativeCommandListener -> ad:
    de.enough.polish.ui.CommandListener listener -> a
    de.enough.polish.ui.Displayable displayable -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
de.enough.polish.midp.ui.TextBox -> f:
    void addCommand(de.enough.polish.ui.Command) -> a
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    void sizeChanged(int,int) -> sizeChanged
de.enough.polish.ui.Alert -> w:
    de.enough.polish.ui.Command DISMISS_COMMAND -> b
    int timeout -> e
    long showTime -> b
    de.enough.polish.ui.IconItem iconItem -> a
    de.enough.polish.ui.Displayable nextDisplayable -> a
    int numberOfCommands -> f
    void addCommand(de.enough.polish.ui.Command) -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    void createItem(java.lang.String,javax.microedition.lcdui.Image,de.enough.polish.ui.Style) -> a
    java.lang.String createCssSelector() -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
    void showNotify() -> a
    void setCurrent(de.enough.polish.ui.Display,de.enough.polish.ui.Alert,de.enough.polish.ui.Displayable) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
de.enough.polish.ui.AlertType -> d:
    de.enough.polish.ui.AlertType ALARM -> a
    de.enough.polish.ui.AlertType CONFIRMATION -> b
    de.enough.polish.ui.AlertType INFO -> c
de.enough.polish.ui.Animatable -> e:
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
de.enough.polish.ui.AnimationThread -> x:
    de.enough.polish.util.ArrayList animationList -> a
    void run() -> run
de.enough.polish.ui.Background -> q:
    int borderWidth -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void releaseResources() -> a
de.enough.polish.ui.Border -> bq:
    int borderWidthTop -> a
    int borderWidthBottom -> b
    int borderWidthLeft -> c
    int borderWidthRight -> d
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.Canvas -> ak:
    de.enough.polish.ui.CommandListener _commandListener -> a
    boolean _isShown -> d
    de.enough.polish.util.IdentityArrayList _commands -> a
    java.lang.String _title -> a
    int getGameAction(int) -> a
    void setFullScreenMode(boolean) -> a
    boolean _keyPressed(int) -> a
    boolean _keyRepeated(int) -> b
    boolean _keyReleased(int) -> c
    boolean _pointerPressed(int,int) -> a
    boolean _pointerReleased(int,int) -> c
    boolean _pointerDragged(int,int) -> b
    void repaint(de.enough.polish.ui.ClippingRegion) -> a
    void repaint() -> e
    void _showNotify() -> f
    void _hideNotify() -> g
    void _hideNotifyExternal() -> h
    void showNotify() -> a
    void hideNotify() -> d
    void paint(javax.microedition.lcdui.Graphics) -> a
    void sizeChanged(int,int) -> sizeChanged
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    void addCommand(de.enough.polish.ui.Command) -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    java.lang.Object[] getCommands() -> a
    void setTitle(java.lang.String) -> a
    java.lang.String getTitle() -> b
de.enough.polish.ui.ChoiceGroup -> af:
    de.enough.polish.ui.Command MARK_COMMAND -> b
    de.enough.polish.ui.Command UNMARK_COMMAND -> c
    int selectedIndex -> I
    boolean isMultiple -> l
    int choiceType -> J
    boolean isImplicit -> m
    de.enough.polish.ui.Command selectCommand -> d
    de.enough.polish.ui.ItemCommandListener additionalItemCommandListener -> b
    boolean isPointerReleaseShouldTriggerKeyRelease -> n
    de.enough.polish.ui.ChoiceItem[] buildChoiceItems(java.lang.String[],javax.microedition.lcdui.Image[],int,de.enough.polish.ui.Style) -> a
    int append(de.enough.polish.ui.ChoiceItem) -> a
    int getSelectedIndex() -> h
    void setSelectedIndex(int,boolean) -> b
    java.lang.String createCssSelector() -> b
    boolean handleKeyPressed(int,int) -> a
    void selectChoiceItem(de.enough.polish.ui.ChoiceItem,boolean) -> a
    boolean handleKeyReleased(int,int) -> b
    boolean handlePointerPressed(int,int) -> c
    boolean handlePointerReleased(int,int) -> d
    void setDefaultCommand(de.enough.polish.ui.Command) -> a
    void setStyleWithBackground(de.enough.polish.ui.Style,boolean) -> b
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Item) -> a
    boolean handleCommand(de.enough.polish.ui.Command) -> a
    void setItemCommandListener(de.enough.polish.ui.ItemCommandListener) -> a
de.enough.polish.ui.ChoiceItem -> c:
    javax.microedition.lcdui.Image defaultRadioSelected -> a
    javax.microedition.lcdui.Image defaultRadioPlain -> b
    javax.microedition.lcdui.Image defaultCheckSelected -> c
    javax.microedition.lcdui.Image defaultCheckPlain -> d
    boolean isMultiple -> b
    javax.microedition.lcdui.Image selected -> e
    javax.microedition.lcdui.Image plain -> f
    boolean isSelected -> a
    javax.microedition.lcdui.Image boxImage -> g
    int boxWidth -> b
    int yAdjust -> c
    boolean drawBox -> c
    int choiceType -> d
    int boxColor -> I
    int yBoxAdjust -> J
    java.lang.String createCssSelector() -> b
    void initContent(int,int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void select(boolean) -> a
de.enough.polish.ui.ClippingRegion -> ac:
    int leftX -> a
    int topY -> b
    int rightX -> c
    int bottomY -> d
    boolean containsRegion -> a
    void reset() -> a
    void addRegion(int,int,int,int) -> a
    int getX() -> a
    int getY() -> b
    int getWidth() -> c
    int getHeight() -> d
    java.lang.String toString() -> toString
de.enough.polish.ui.Color -> cm:
    int argb -> a
    boolean isDynamic -> a
    java.lang.Integer integer -> a
    int getColor() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
de.enough.polish.ui.Command -> z:
    java.lang.String longLabel -> a
    int commandType -> a
    int priority -> b
    de.enough.polish.ui.Style style -> a
    java.lang.String label -> b
    java.lang.String getLabel() -> getLabel
    java.lang.String getLongLabel() -> getLongLabel
    int getCommandType() -> getCommandType
    int getPriority() -> getPriority
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
de.enough.polish.ui.CommandItem -> a:
    de.enough.polish.ui.Command command -> b
    de.enough.polish.ui.Container children -> a
    boolean hasChildren -> a
    int childIndicatorWidth -> b
    int childIndicatorYOffset -> c
    int childIndicatorHeight -> d
    boolean isOpen -> b
    void initContent(int,int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyReleased(int,int) -> b
    boolean handlePointerPressed(int,int) -> c
    boolean handlePointerReleased(int,int) -> d
    boolean handlePointerDragged(int,int,de.enough.polish.ui.ClippingRegion) -> a
    void open(boolean) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void hideNotify() -> a
    boolean isInItemArea(int,int) -> e
    void defocus(de.enough.polish.ui.Style) -> b
de.enough.polish.ui.CommandListener -> y:
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
de.enough.polish.ui.Container -> o:
    de.enough.polish.util.ArrayList itemsList -> a
    boolean autoFocusEnabled -> a
    int autoFocusIndex -> a
    de.enough.polish.ui.Style itemStyle -> c
    de.enough.polish.ui.Item focusedItem -> a
    int focusedIndex -> b
    boolean enableScrolling -> b
    boolean allowCycling -> c
    int yOffset -> c
    int targetYOffset -> I
    int focusedTopMargin -> J
    de.enough.polish.ui.ContainerView containerView -> a
    int lastPointerPressY -> K
    int lastPointerPressYOffset -> d
    long lastPointerPressTime -> a
    boolean isScrollRequired -> l
    int scrollHeight -> L
    de.enough.polish.ui.Item[] containerItems -> a
    boolean showCommandsHasBeenCalled -> m
    de.enough.polish.ui.Item scrollItem -> c
    de.enough.polish.ui.Style plainStyle -> d
    boolean isIgnoreMargins -> n
    int scrollDirection -> M
    int scrollSpeed -> N
    int scrollDamping -> O
    long lastAnimationTime -> b
    boolean isScrolling -> o
    void setScrollHeight(int) -> a
    int getScrollHeight() -> a
    void add(de.enough.polish.ui.Item) -> a
    void add(int,de.enough.polish.ui.Item) -> a
    de.enough.polish.ui.Item set(int,de.enough.polish.ui.Item) -> a
    de.enough.polish.ui.Item set(int,de.enough.polish.ui.Item,de.enough.polish.ui.Style) -> a
    de.enough.polish.ui.Item get(int) -> a
    de.enough.polish.ui.Item remove(int) -> b
    int size() -> b
    de.enough.polish.ui.Item[] getItems() -> a
    boolean focusChild(int) -> a
    void focusChild(int,de.enough.polish.ui.Item,int,boolean) -> a
    boolean scroll(int,de.enough.polish.ui.Item,boolean) -> a
    boolean scroll(int,int,int,int,int,boolean) -> a
    void initLayout(de.enough.polish.ui.Style,int) -> a
    void initContent(int,int,int) -> a
    void updateInternalPosition(de.enough.polish.ui.Item) -> b
    void setItemWidth(int) -> b
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintBackgroundAndBorder(int,int,int,int,javax.microedition.lcdui.Graphics) -> b
    java.lang.String createCssSelector() -> b
    boolean handleKeyPressed(int,int) -> a
    boolean handleNavigate(int,int) -> h
    boolean handleKeyReleased(int,int) -> b
    boolean handleKeyRepeated(int,int) -> f
    boolean shiftFocus(boolean,int) -> a
    int getFocusedIndex() -> c
    de.enough.polish.ui.Item getFocusedItem() -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyleWithBackground(de.enough.polish.ui.Style,boolean) -> b
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    de.enough.polish.ui.Style focus(de.enough.polish.ui.Style,int) -> a
    void defocus(de.enough.polish.ui.Style) -> b
    void showCommands() -> b
    boolean handleCommand(de.enough.polish.ui.Command) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void addRepaintArea(de.enough.polish.ui.ClippingRegion) -> a
    void showNotify() -> c
    void hideNotify() -> a
    boolean handlePointerPressed(int,int) -> c
    boolean handlePointerScrollReleased$255f299(int) -> b
    boolean handlePointerReleased(int,int) -> d
    boolean handlePointerDragged(int,int,de.enough.polish.ui.ClippingRegion) -> a
    int getItemAreaHeight() -> d
    de.enough.polish.ui.Item getChildAt(int,int) -> b
    de.enough.polish.ui.Item getChildAtImpl(int,int) -> a
    int getScrollYOffset() -> e
    int getRelativeScrollYOffset() -> f
    void setScrollYOffset(int,boolean) -> a
    void startScroll(int,int,int) -> b
    int getNumberOfInteractiveItems() -> g
    boolean isInItemArea(int,int) -> e
    void initMargin(de.enough.polish.ui.Style,int) -> b
de.enough.polish.ui.ContainerView -> cn:
    int xOffset -> i
    int targetXOffset -> j
    int focusedIndex -> g
    de.enough.polish.ui.Container parentContainer -> a
    int appearanceMode -> h
    de.enough.polish.ui.Item focusedItem -> b
    int columnsSetting -> k
    int numberOfColumns -> l
    de.enough.polish.ui.Dimension[] columnsWidths -> a
    int[] rowsHeights -> a
    int numberOfRows -> m
    boolean allowCycling -> a
    boolean allowsAutoTraversal -> b
    boolean isHorizontal -> c
    boolean isVertical -> d
    int lastAvailableContentWidth -> n
    int scrollDirection -> o
    int scrollSpeed -> p
    int scrollDamping -> q
    long lastAnimationTime -> a
    long lastPointerPressTime -> b
    int lastPointerPressXOffset -> r
    boolean isPointerPressedHandled -> e
    int pointerPressedX -> s
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void setScrollXOffset(int,boolean) -> a
    int getScrollXOffset() -> a
    void initContent(de.enough.polish.ui.Item,int,int,int) -> b
    boolean isLayoutExpand() -> a
    void paintContent$48794be9(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void paintItem(de.enough.polish.ui.Item,int,int,int,int,int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    de.enough.polish.ui.Item shiftFocus(boolean,int,de.enough.polish.ui.Item[],boolean,int) -> a
    void setStyle(de.enough.polish.ui.Style) -> c
    boolean handleKeyPressed(int,int) -> a
    boolean handlePointerPressed(int,int) -> b
    boolean handlePointerDragged(int,int,de.enough.polish.ui.ClippingRegion) -> a
    boolean handlePointerReleased(int,int) -> c
    de.enough.polish.ui.Style focusItem(int,de.enough.polish.ui.Item,int,de.enough.polish.ui.Style) -> a
    de.enough.polish.ui.Item getChildAt(int,int) -> a
de.enough.polish.ui.Dimension -> dl:
    int value -> a
    boolean isPercent -> a
    int factor -> b
    java.lang.String valueAsString -> a
    int getValue(int) -> a
    void resolve() -> a
    boolean parseNumberValue(java.lang.String) -> a
de.enough.polish.ui.Display -> al:
    de.enough.polish.ui.Display instance -> a
    de.enough.polish.ui.Displayable currentDisplayable -> a
    de.enough.polish.ui.Canvas currentCanvas -> a
    de.enough.polish.ui.NativeDisplay nativeDisplay -> a
    int screenWidth -> a
    int screenHeight -> b
    boolean enableScreenChangeAnimations -> b
    boolean showInfo -> c
    int currentInfoColor -> c
    de.enough.polish.ui.Displayable infoNextDisplayable -> b
    long infoStartTime -> a
    de.enough.polish.ui.CommandListener commandListener -> a
    int nonFullScreenHeight -> d
    boolean emitNotifyOnUserEvent -> a
    boolean hasBeenShown -> d
    de.enough.polish.ui.Display getDisplay(javax.microedition.midlet.MIDlet) -> a
    de.enough.polish.ui.Displayable getCurrent() -> a
    void setCurrent(de.enough.polish.ui.Displayable) -> a
    boolean isSoftKeyLeft(int,int) -> a
    boolean isSoftKeyRight(int,int) -> b
    int getGameAction(int) -> getGameAction
    void paint(javax.microedition.lcdui.Graphics) -> paint
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    void hideNotify() -> hideNotify
    void showNotify() -> showNotify
    void keyPressed(int) -> keyPressed
    void keyRepeated(int) -> keyRepeated
    void keyReleased(int) -> keyReleased
    void pointerPressed(int,int) -> pointerPressed
    void pointerReleased(int,int) -> pointerReleased
    void pointerDragged(int,int) -> pointerDragged
    void sizeChanged(int,int) -> sizeChanged
    int getScreenHeight() -> a
    int getScreenWidth() -> b
    void requestRepaint(int,int,int,int) -> a
    void commandAction(javax.microedition.lcdui.Command,javax.microedition.lcdui.Displayable) -> commandAction
    void run() -> run
de.enough.polish.ui.Display$1 -> ai:
    void paint(javax.microedition.lcdui.Graphics) -> paint
de.enough.polish.ui.Display$2 -> ah:
    void paint(javax.microedition.lcdui.Graphics) -> paint
de.enough.polish.ui.Displayable -> g:
    void sizeChanged(int,int) -> sizeChanged
de.enough.polish.ui.Form -> ab:
    int append(de.enough.polish.ui.Item,de.enough.polish.ui.Style) -> a
    int append(java.lang.String,de.enough.polish.ui.Style) -> a
    int append(java.lang.String) -> a
    void set(int,de.enough.polish.ui.Item) -> a
    void set(int,de.enough.polish.ui.Item,de.enough.polish.ui.Style) -> a
    java.lang.String createCssSelector() -> a
de.enough.polish.ui.IconItem -> u:
    javax.microedition.lcdui.Image image -> a
    int imageAlign -> b
    int imageHeight -> c
    int imageWidth -> d
    int yAdjustText -> I
    boolean isTextVisible -> a
    int relativeIconX -> J
    int relativeIconY -> K
    javax.microedition.lcdui.Image imageNormal -> b
    java.lang.String createCssSelector() -> b
    void initContent(int,int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    void setImage(javax.microedition.lcdui.Image) -> a
    void defocus(de.enough.polish.ui.Style) -> b
    de.enough.polish.ui.Style focus(de.enough.polish.ui.Style,int) -> a
de.enough.polish.ui.Item -> aj:
    de.enough.polish.util.ArrayList COMMANDS -> a
    int layout -> e
    de.enough.polish.ui.ItemCommandListener itemCommandListener -> a
    de.enough.polish.ui.Command defaultCommand -> a
    boolean isInitialized -> d
    de.enough.polish.ui.Background background -> a
    de.enough.polish.ui.Border border -> a
    de.enough.polish.ui.Style style -> a
    int itemWidth -> f
    int itemHeight -> g
    int paddingLeft -> h
    int paddingTop -> i
    int paddingRight -> j
    int paddingBottom -> k
    int paddingVertical -> l
    int paddingHorizontal -> m
    int marginLeft -> n
    int marginTop -> o
    int marginRight -> p
    int marginBottom -> q
    int contentWidth -> r
    int contentHeight -> s
    int availContentWidth -> t
    int availContentHeight -> u
    int backgroundWidth -> v
    int backgroundHeight -> w
    int appearanceMode -> x
    de.enough.polish.ui.Screen screen -> a
    java.lang.String cssSelector -> b
    boolean isStyleInitialised -> e
    de.enough.polish.ui.Item parent -> b
    de.enough.polish.util.ArrayList commands -> b
    boolean isLayoutCenter -> f
    boolean isLayoutExpand -> g
    boolean isLayoutRight -> h
    int relativeX -> y
    int relativeY -> z
    int contentX -> A
    int contentY -> B
    int internalX -> C
    int internalY -> D
    int internalWidth -> E
    int internalHeight -> F
    boolean isFocused -> i
    de.enough.polish.ui.Style labelStyle -> c
    de.enough.polish.ui.StringItem label -> a
    boolean useSingleRow -> a
    de.enough.polish.ui.Style focusedStyle -> b
    boolean isPressed -> j
    de.enough.polish.ui.Style normalStyle -> d
    de.enough.polish.ui.Style pressedStyle -> e
    boolean isShown -> k
    int availableWidth -> G
    int availableHeight -> H
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    int getItemWidth(int,int,int) -> a
    int getItemHeight(int,int,int) -> b
    void addCommand(de.enough.polish.ui.Command) -> b
    void removeCommand(de.enough.polish.ui.Command) -> c
    void repaint() -> d
    int getBorderWidthLeft() -> i
    int getBorderWidthRight() -> j
    int getBorderWidthTop() -> k
    int getBorderWidthBottom() -> l
    void requestInit() -> e
    de.enough.polish.ui.Screen getScreen() -> a
    void setItemCommandListener(de.enough.polish.ui.ItemCommandListener) -> a
    void setDefaultCommand(de.enough.polish.ui.Command) -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> c
    void paintBackgroundAndBorder(int,int,int,int,javax.microedition.lcdui.Graphics) -> b
    void init(int,int,int) -> c
    void initLayout(de.enough.polish.ui.Style,int) -> a
    void initMargin(de.enough.polish.ui.Style,int) -> b
    void initPadding(de.enough.polish.ui.Style,int) -> c
    void initStyle() -> f
    void initContent(int,int,int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    java.lang.String createCssSelector() -> b
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyRepeated(int,int) -> f
    boolean handleKeyReleased(int,int) -> b
    boolean notifyItemPressedStart() -> b
    void notifyItemPressedEnd() -> g
    boolean isInContentWithPaddingArea(int,int) -> g
    boolean isInItemArea(int,int) -> e
    boolean isInItemArea(int,int,de.enough.polish.ui.Item) -> a
    boolean handlePointerPressed(int,int) -> c
    boolean handlePointerReleased(int,int) -> d
    boolean handlePointerDragged(int,int,de.enough.polish.ui.ClippingRegion) -> a
    void addRepaintArea(de.enough.polish.ui.ClippingRegion) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    boolean animate() -> a
    de.enough.polish.ui.Style getFocusedStyle() -> a
    de.enough.polish.ui.Style focus(de.enough.polish.ui.Style,int) -> a
    void defocus(de.enough.polish.ui.Style) -> b
    void showCommands() -> b
    void addCommands(de.enough.polish.util.ArrayList) -> a
    boolean handleCommand(de.enough.polish.ui.Command) -> a
    void showNotify() -> c
    void hideNotify() -> a
    int getAbsoluteX() -> m
    int getAbsoluteY() -> n
    int getItemAreaHeight() -> d
    void setInitialized(boolean) -> b
    boolean isInitialized() -> c
    void setItemHeight(int) -> c
    void setItemWidth(int) -> b
    boolean isLayoutLeft() -> d
    boolean isLayoutCenter() -> e
    boolean isLayoutBottom() -> f
    boolean isLayoutVerticalCenter() -> g
    boolean isLayoutVerticalExpand() -> h
    boolean fireContinueCycle(int) -> c
de.enough.polish.ui.ItemCommandListener -> s:
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Item) -> a
de.enough.polish.ui.ItemView -> dx:
    int contentWidth -> a
    int contentHeight -> b
    int availableWidth -> c
    int paddingVertical -> d
    int paddingHorizontal -> e
    int layout -> f
    de.enough.polish.ui.Item parentItem -> a
    void init(de.enough.polish.ui.Item,int,int,int) -> a
    void initContent(de.enough.polish.ui.Item,int,int,int) -> b
    void focus$64d298a6(de.enough.polish.ui.Style) -> a
    void defocus(de.enough.polish.ui.Style) -> b
    void setStyle(de.enough.polish.ui.Style) -> c
    void setStyle$64d258d5(boolean) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handlePointerPressed(int,int) -> b
    boolean handlePointerReleased(int,int) -> c
    boolean handlePointerDragged(int,int,de.enough.polish.ui.ClippingRegion) -> a
de.enough.polish.ui.List -> ag:
    de.enough.polish.ui.Command SELECT_COMMAND -> b
    de.enough.polish.ui.Command selectCommand -> c
    int listType -> e
    de.enough.polish.ui.ChoiceGroup choiceGroup -> a
    int append(java.lang.String,javax.microedition.lcdui.Image,de.enough.polish.ui.Style) -> a
    void set(int,java.lang.String,javax.microedition.lcdui.Image,de.enough.polish.ui.Style) -> a
    int getSelectedIndex() -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    java.lang.String createCssSelector() -> a
de.enough.polish.ui.NativeDisplay -> m:
    int getColor(int) -> a
    void setCurrent(de.enough.polish.ui.Display) -> a
    void setCurrent(de.enough.polish.ui.Displayable) -> a
    void callSerially(java.lang.Runnable) -> a
de.enough.polish.ui.Screen -> aa:
    de.enough.polish.ui.Item title -> a
    de.enough.polish.ui.Style titleStyle -> b
    int subTitleHeight -> e
    int titleHeight -> f
    de.enough.polish.ui.Background background -> b
    int backgroundX -> g
    int backgroundY -> h
    int backgroundWidth -> i
    int backgroundHeight -> j
    de.enough.polish.ui.Border border -> a
    de.enough.polish.ui.Style style -> a
    int screenHeight -> k
    int originalScreenHeight -> l
    int screenWidth -> m
    java.lang.String cssSelector -> a
    de.enough.polish.ui.Screen$ForwardCommandListener forwardCommandListener -> a
    de.enough.polish.ui.Container container -> a
    boolean isLayoutCenter -> b
    boolean isLayoutRight -> c
    boolean isLayoutVCenter -> e
    boolean isLayoutBottom -> f
    boolean isLayoutHorizontalShrink -> g
    boolean isLayoutVerticalShrink -> h
    boolean isInitialized -> i
    de.enough.polish.ui.Command lastTriggeredCommand -> a
    de.enough.polish.ui.Command backCommand -> b
    int fullScreenHeight -> n
    int menuBarHeight -> o
    de.enough.polish.ui.Command okCommand -> c
    de.enough.polish.ui.Command cancelCommand -> d
    de.enough.polish.ui.Command menuSingleLeftCommand -> e
    java.lang.String menuLeftString -> b
    de.enough.polish.ui.Command menuSingleRightCommand -> f
    java.lang.String menuRightString -> c
    de.enough.polish.ui.Container menuContainer -> b
    de.enough.polish.util.ArrayList menuCommands -> a
    boolean menuOpened -> j
    javax.microedition.lcdui.Font menuFont -> a
    int menuFontColor -> p
    int menuBarColor -> q
    int menuRightCommandX -> r
    int menuLeftCommandX -> s
    de.enough.polish.ui.Item focusedItem -> b
    boolean paintScrollIndicator -> k
    boolean paintScrollIndicatorUp -> l
    boolean paintScrollIndicatorDown -> m
    int scrollIndicatorX -> t
    int scrollIndicatorY -> u
    int scrollIndicatorWidth -> v
    int scrollIndicatorHeight -> w
    javax.microedition.lcdui.Image scrollIndicatorUpImage -> a
    javax.microedition.lcdui.Image scrollIndicatorDownImage -> b
    boolean showTitleOrMenu -> n
    de.enough.polish.ui.Item infoItem -> c
    int infoHeight -> x
    int contentX -> a
    int contentY -> b
    int contentWidth -> c
    int contentHeight -> d
    int marginLeft -> y
    int marginRight -> z
    int marginTop -> A
    int marginBottom -> B
    boolean repaintPreviousScreen -> o
    de.enough.polish.ui.Canvas previousScreen -> a
    de.enough.polish.ui.Background previousScreenOverlayBackground -> a
    boolean isScreenChangeDirtyFlag -> p
    java.lang.Object paintLock -> a
    de.enough.polish.util.ArrayList itemCommands -> b
    long lastInteractionTime -> a
    boolean ignoreRepaintRequests -> q
    boolean isRepaintRequested -> r
    boolean isInitRequested -> s
    de.enough.polish.ui.CommandListener realCommandListener -> a
    boolean isResourcesReleased -> t
    int keyStates -> C
    int releasedKeys -> D
    boolean enableScreenChangeAnimation -> a
    de.enough.polish.ui.ClippingRegion userEventRepaintRegion -> a
    void init(int,int) -> a
    void requestInit() -> b
    void requestRepaint() -> c
    void requestRepaint(int,int,int,int) -> a
    void calculateContentArea(int,int,int,int) -> b
    void showNotify() -> a
    void hideNotify() -> d
    void setStyle(de.enough.polish.ui.Style) -> a
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    void paint(javax.microedition.lcdui.Graphics) -> a
    void paintMenuBar(javax.microedition.lcdui.Graphics) -> b
    void paintTitleAndSubtitle(javax.microedition.lcdui.Graphics) -> c
    void paintBackgroundAndBorder(javax.microedition.lcdui.Graphics) -> d
    java.lang.String getTitle() -> b
    void setTitle(java.lang.String) -> a
    de.enough.polish.ui.Item getTitleItem() -> a
    void setInfo(java.lang.String) -> b
    void setInfo(de.enough.polish.ui.Item) -> a
    boolean _keyPressed(int) -> a
    boolean _keyRepeated(int) -> b
    boolean _keyReleased(int) -> c
    java.lang.String createCssSelector() -> a
    boolean handleKeyPressed(int,int) -> f
    void setCommandListener(de.enough.polish.ui.CommandListener) -> a
    void updateMenuTexts() -> i
    void openMenu(boolean) -> b
    void addCommand(de.enough.polish.ui.Command) -> a
    java.lang.Object[] getCommands() -> a
    void removeCommand(de.enough.polish.ui.Command) -> b
    void setItemCommands(de.enough.polish.util.ArrayList,de.enough.polish.ui.Item) -> a
    void removeItemCommands(de.enough.polish.ui.Item) -> b
    void callCommandListener(de.enough.polish.ui.Command) -> c
    boolean _pointerPressed(int,int) -> a
    boolean _pointerDragged(int,int) -> b
    boolean _pointerReleased(int,int) -> c
    boolean handlePointerReleasedOutsideScreenArea$255f299() -> a
    boolean handleCommand(de.enough.polish.ui.Command) -> a
    void setFullScreenMode(boolean) -> a
    void sizeChanged(int,int) -> sizeChanged
    int getScreenFullHeight() -> a
    int getScrollYOffset() -> b
    boolean isGameActionFire(int,int) -> d
    boolean isSoftKeyLeft(int,int) -> g
    boolean isSoftKeyRight(int,int) -> h
    boolean isSoftKey(int,int) -> e
de.enough.polish.ui.Screen$ForwardCommandListener -> r:
    de.enough.polish.ui.Screen this$0 -> a
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
de.enough.polish.ui.ScreenChangeAnimation -> ae:
    de.enough.polish.ui.Display display -> a
    de.enough.polish.ui.Canvas nextCanvas -> a
    javax.microedition.lcdui.Image lastCanvasImage -> a
    int[] lastCanvasRgb -> b
    javax.microedition.lcdui.Image nextCanvasImage -> b
    int[] nextCanvasRgb -> a
    boolean useNextCanvasRgb -> a
    int screenWidth -> a
    int screenHeight -> b
    de.enough.polish.ui.Displayable nextDisplayable -> a
    boolean isForwardAnimation -> b
    int nextContentX -> c
    int nextContentY -> d
    int lastContentX -> e
    int lastContentY -> f
    boolean supportsDifferentScreenSizes -> c
    boolean abort -> e
    void onShow(de.enough.polish.ui.Style,de.enough.polish.ui.Display,int,int,de.enough.polish.ui.Displayable,de.enough.polish.ui.Displayable,boolean) -> a
    javax.microedition.lcdui.Image toImage(de.enough.polish.ui.Displayable,de.enough.polish.ui.Screen,de.enough.polish.ui.Screen,int,int) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    boolean animate() -> a
    void paintAnimation(javax.microedition.lcdui.Graphics) -> a_
    void paint(javax.microedition.lcdui.Graphics) -> a
    boolean _pointerPressed(int,int) -> a
    boolean _pointerReleased(int,int) -> c
    boolean _pointerDragged(int,int) -> b
    void showNotify() -> a
    void hideNotify() -> d
    void sizeChanged(int,int) -> sizeChanged
    boolean _keyRepeated(int) -> b
    boolean _keyReleased(int) -> c
    boolean _keyPressed(int) -> a
    void updateNextScreen(de.enough.polish.ui.Canvas,javax.microedition.lcdui.Image,int[]) -> a
    void abort() -> b
    void run() -> run
de.enough.polish.ui.StringItem -> b:
    java.lang.String text -> a
    de.enough.polish.util.WrappedText textLines -> a
    int textColor -> a
    javax.microedition.lcdui.Font font -> a
    boolean isTextInitializationRequired -> a
    int lastAvailableContentWidth -> b
    int lastContentWidth -> c
    int lastContentHeight -> d
    java.lang.String getText() -> a
    void setText(java.lang.String) -> a
    javax.microedition.lcdui.Font getFont() -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    int getLineHeight() -> b
    int stringWidth(java.lang.String) -> a
    int charWidth(char) -> a
    int getFontHeight() -> a
    void initContent(int,int,int) -> a
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    java.lang.String createCssSelector() -> b
de.enough.polish.ui.Style -> em:
    java.lang.Boolean TRUE -> a
    java.lang.Boolean FALSE -> b
    java.lang.String name -> a
    de.enough.polish.ui.Background background -> a
    de.enough.polish.ui.Border border -> a
    javax.microedition.lcdui.Font font -> a
    int layout -> a
    short[] attributeKeys -> a
    java.lang.Object[] attributeValues -> a
    java.lang.String getProperty(int) -> a
    java.lang.Object getObjectProperty(int) -> a
    java.lang.Integer getIntProperty(int) -> a
    de.enough.polish.ui.Color getColorProperty(int) -> a
    java.lang.Boolean getBooleanProperty(int) -> a
    void releaseResources() -> a
    int getFontColor() -> a
    javax.microedition.lcdui.Font getFont() -> a
    int getMargin(de.enough.polish.ui.Dimension,int) -> a
    int getMarginLeft(int) -> a
    int getMarginRight(int) -> b
    int getMarginTop(int) -> c
    int getMarginBottom(int) -> d
    int getPadding(de.enough.polish.ui.Dimension,int) -> b
    int getPaddingLeft(int) -> e
    int getPaddingRight(int) -> f
    int getPaddingTop(int) -> g
    int getPaddingBottom(int) -> h
    int getPaddingHorizontal(int) -> i
    int getPaddingVertical(int) -> j
    java.lang.String toString() -> toString
de.enough.polish.ui.StyleSheet -> p:
    java.util.Hashtable imagesByName -> a
    de.enough.polish.ui.Background defaultBackground -> a
    de.enough.polish.ui.Border defaultBorder -> a
    de.enough.polish.ui.Style defaultStyle -> a
    de.enough.polish.ui.Style ltkStyle -> b
    de.enough.polish.ui.Style browsertextbolditalicStyle -> w
    de.enough.polish.ui.Style browsertextboldStyle -> x
    de.enough.polish.ui.Style listscoreStyle -> c
    de.enough.polish.ui.Style browsertextitalicStyle -> y
    de.enough.polish.ui.Style titleStyle -> d
    de.enough.polish.ui.Style browseroptionStyle -> z
    de.enough.polish.ui.Style browserStyle -> A
    de.enough.polish.ui.Style browseroptionitemStyle -> B
    de.enough.polish.ui.Style questionStyle -> e
    de.enough.polish.ui.Style rssdescriptionalertStyle -> C
    de.enough.polish.ui.Style welcome1Style -> f
    de.enough.polish.ui.Style alertcontentStyle -> g
    de.enough.polish.ui.Style menuStyle -> h
    de.enough.polish.ui.Style browsertextStyle -> D
    de.enough.polish.ui.Style browserchoicegroupexclusiveStyle -> E
    de.enough.polish.ui.Style textboxStyle -> i
    de.enough.polish.ui.Style browserradioStyle -> F
    de.enough.polish.ui.Style browsertextcodeStyle -> G
    de.enough.polish.ui.Style browserchoicegroupmultipleStyle -> H
    de.enough.polish.ui.Style listbackgroundStyle -> j
    de.enough.polish.ui.Style mailalertStyle -> k
    de.enough.polish.ui.Style savStyle -> l
    de.enough.polish.ui.Style welcome4Style -> m
    de.enough.polish.ui.Style browsercheckboxStyle -> I
    de.enough.polish.ui.Style welcome2Style -> n
    de.enough.polish.ui.Style otherformsStyle -> o
    de.enough.polish.ui.Style welcome3Style -> p
    de.enough.polish.ui.Style menuitemfocusedStyle -> J
    de.enough.polish.ui.Style menuitempressedStyle -> K
    de.enough.polish.ui.Style scorefocusedStyle -> L
    de.enough.polish.ui.Style scoretpressedStyle -> M
    de.enough.polish.ui.Style scoretfocusedStyle -> N
    de.enough.polish.ui.Style listsfocusedStyle -> O
    de.enough.polish.ui.Style scorepressedStyle -> P
    de.enough.polish.ui.Style browserlinkfocStyle -> Q
    de.enough.polish.ui.Style browserinputfocStyle -> R
    de.enough.polish.ui.Style listspressedStyle -> S
    de.enough.polish.ui.Style browserchoicegrouppopupfocusedStyle -> T
    de.enough.polish.ui.Style scoreStyle -> q
    de.enough.polish.ui.Style browserchoicegrouppopupStyle -> U
    de.enough.polish.ui.Style scoretStyle -> r
    de.enough.polish.ui.Style listsStyle -> s
    de.enough.polish.ui.Style browserinputStyle -> V
    de.enough.polish.ui.Style menuitemStyle -> t
    de.enough.polish.ui.Style browserlinkStyle -> W
    java.util.Hashtable stylesByName -> b
    de.enough.polish.ui.Style labelStyle -> u
    de.enough.polish.ui.Style focusedStyle -> v
    de.enough.polish.ui.Screen currentScreen -> a
    de.enough.polish.ui.Display display -> a
    de.enough.polish.ui.AnimationThread animationThread -> a
    de.enough.polish.ui.Command OK_CMD -> a
    de.enough.polish.ui.Command CANCEL_CMD -> b
    void initStyles0() -> a
    javax.microedition.lcdui.Image getImage$4e21f25b(java.lang.String,boolean) -> a
    de.enough.polish.ui.Style getStyle(de.enough.polish.ui.Item) -> a
    de.enough.polish.ui.Style getStyle(de.enough.polish.ui.Screen) -> a
de.enough.polish.ui.TextField -> t:
    de.enough.polish.ui.Command CLEAR_CMD -> b
    de.enough.polish.ui.Command DELETE_CMD -> c
    de.enough.polish.ui.Command SWITCH_KEYBOARD_CMD -> d
    int maxSize -> b
    int constraints -> c
    char editingCaretChar -> a
    char caretChar -> b
    boolean showCaret -> a
    long lastCaretSwitch -> a
    java.lang.String title -> c
    java.lang.String passwordText -> d
    boolean isPassword -> b
    boolean enableDirectInput -> c
    de.enough.polish.ui.ItemCommandListener additionalItemCommandListener -> b
    int inputMode -> d
    boolean isKeyDown -> l
    boolean nextCharUppercase -> m
    java.lang.String[] realTextLines -> a
    java.lang.String originalRowText -> e
    int caretPosition -> I
    int caretColumn -> J
    int caretRow -> K
    int caretX -> L
    int caretY -> M
    int caretWidth -> N
    boolean showLength -> n
    int lastKey -> O
    long lastInputTime -> b
    int characterIndex -> P
    java.lang.String charactersKey1 -> f
    java.lang.String charactersKey2 -> g
    java.lang.String charactersKey3 -> h
    java.lang.String charactersKey4 -> i
    java.lang.String charactersKey5 -> j
    java.lang.String charactersKey6 -> k
    java.lang.String charactersKey7 -> l
    java.lang.String charactersKey8 -> m
    java.lang.String charactersKey9 -> n
    java.lang.String charactersKey0 -> o
    java.lang.String charactersKeyStar -> p
    java.lang.String charactersKeyPound -> q
    java.lang.String[] CHARACTERS -> b
    java.lang.String[] EMAIL_CHARACTERS -> c
    java.lang.String[] characters -> d
    boolean isNumeric -> o
    boolean isDecimal -> p
    boolean isEmail -> q
    boolean isUrl -> r
    int rowHeight -> Q
    java.lang.Object lock -> a
    long deleteKeyRepeatCount -> c
    char emailSeparatorChar -> c
    de.enough.polish.midp.ui.TextBox midpTextBox -> a
    boolean skipKeyReleasedEvent -> s
    boolean cskOpensNativeEditor -> t
    boolean flashCaret -> u
    boolean isUneditable -> v
    boolean isShowInputInfo -> w
    boolean suppressCommands -> x
    boolean useAsciiKeyMap -> y
    boolean isKeyPressedHandled -> z
    int numberOfDecimalFractions -> R
    java.lang.String getString() -> c
    void setString(java.lang.String) -> b
    void updateDeleteCommand(java.lang.String) -> c
    int size() -> b
    void setCaretPosition(int) -> a
    void paintContent(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    int getCaretXPosition$4868d301(int) -> a
    void initContent(int,int,int) -> a
    void setCaretRow(java.lang.String,int) -> a
    java.lang.String createCssSelector() -> b
    void setStyle(de.enough.polish.ui.Style) -> a
    void setStyle(de.enough.polish.ui.Style,boolean) -> a
    boolean isValidInput(char,int,java.lang.String) -> a
    void commitCurrentCharacter() -> h
    void insertCharacter(char,boolean,boolean) -> a
    void updateInfo() -> i
    void animate(long,de.enough.polish.ui.ClippingRegion) -> a
    boolean animate() -> a
    boolean handleKeyPressed(int,int) -> a
    boolean handleKeyInsert(int,int) -> h
    boolean handleKeyClear$255f299() -> i
    boolean handleKeyRepeated(int,int) -> f
    boolean handleKeyReleased(int,int) -> b
    boolean handlePointerReleased(int,int) -> d
    boolean deleteCurrentChar() -> j
    void showTextBox() -> j
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Displayable) -> commandAction
    void setItemCommandListener(de.enough.polish.ui.ItemCommandListener) -> a
    void commandAction(de.enough.polish.ui.Command,de.enough.polish.ui.Item) -> a
    void defocus(de.enough.polish.ui.Style) -> b
    de.enough.polish.ui.Style focus(de.enough.polish.ui.Style,int) -> a
    void showNotify() -> c
    void hideNotify() -> a
de.enough.polish.ui.backgrounds.SimpleBackground -> bb:
    int color -> b
    de.enough.polish.ui.Color colorObj -> a
    boolean isInitialized -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.backgrounds.TranslucentSimpleBackground -> bj:
    int argbColor -> b
    int[] buffer -> a
    int lastWidth -> c
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void releaseResources() -> a
de.enough.polish.ui.borders.DropShadowBorder -> bu:
    int[] shadowColors -> a
    int orientation -> e
    int borderWidth -> f
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.borders.RoundRectBorder -> cc:
    int color -> e
    int arcWidth -> f
    int arcHeight -> g
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.borders.SimpleBorder -> cd:
    int color -> e
    boolean isArgb -> a
    void paint(int,int,int,int,javax.microedition.lcdui.Graphics) -> a
de.enough.polish.ui.screenanimations.BottomScreenChangeAnimation -> v:
    int currentY -> g
    void setStyle(de.enough.polish.ui.Style) -> a
    boolean animate() -> a
    void paintAnimation(javax.microedition.lcdui.Graphics) -> a_
de.enough.polish.ui.screenanimations.FadeScreenChangeAnimation -> l:
    int steps -> g
    int currentStep -> h
    void onShow(de.enough.polish.ui.Style,de.enough.polish.ui.Display,int,int,de.enough.polish.ui.Displayable,de.enough.polish.ui.Displayable,boolean) -> a
    boolean animate() -> a
    void addOpacity(int,int[]) -> a
    void paintAnimation(javax.microedition.lcdui.Graphics) -> a_
de.enough.polish.util.ArrayList -> fi:
    java.lang.Object[] storedObjects -> a
    int growthFactor -> b
    int size -> a
    boolean contains(java.lang.Object) -> a
    int indexOf(java.lang.Object) -> a
    java.lang.Object get(int) -> a
    java.lang.Object remove(int) -> b
    boolean remove(java.lang.Object) -> b
    void clear() -> a
    void add(java.lang.Object) -> a
    void add(int,java.lang.Object) -> a
    java.lang.String toString() -> toString
    java.lang.Object[] toArray(java.lang.Object[]) -> a
    void increaseCapacity() -> b
de.enough.polish.util.DrawUtil -> n:
    int[] getGradient(int,int,int) -> a
    int getComplementaryColor(int) -> a
    void drawLine(int,int,int,int,int,javax.microedition.lcdui.Graphics) -> a
    void drawRect(int,int,int,int,int,javax.microedition.lcdui.Graphics) -> b
de.enough.polish.util.IdentityArrayList -> fl:
    java.lang.Object[] storedObjects -> a
    int growthFactor -> b
    int size -> a
    boolean contains(java.lang.Object) -> a
    void add(java.lang.Object) -> a
    java.lang.Object set(int,java.lang.Object) -> a
    java.lang.String toString() -> toString
de.enough.polish.util.IntList -> fm:
    int[] storedObjects -> a
    int growthFactor -> a
    int size -> b
    int removeElementAt(int) -> a
    java.lang.String toString() -> toString
de.enough.polish.util.TextUtil -> h:
    javax.microedition.lcdui.Display display -> a
    void wrap$18d1e235(java.lang.String,javax.microedition.lcdui.Font,int,int,de.enough.polish.util.WrappedText,int,int) -> a
    void addAppendix(javax.microedition.lcdui.Font,int,java.lang.String,int,int,de.enough.polish.util.WrappedText) -> a
    void callSerially(java.lang.Runnable) -> a
    int getColor(int) -> a
    void setCurrent(de.enough.polish.ui.Display) -> a
    void setCurrent(de.enough.polish.ui.Displayable) -> a
    de.enough.polish.util.TextUtil getDisplay$1ce7840a(javax.microedition.midlet.MIDlet) -> a
de.enough.polish.util.WrappedText -> fu:
    de.enough.polish.util.IdentityArrayList linesList -> a
    de.enough.polish.util.IntList lineWidthsList -> a
    int maxLineWidth -> a
    void addLine(java.lang.String,int) -> a
    void setLine(int,java.lang.String,int) -> a
    void clear() -> a
    int size() -> a
    java.lang.String getLine(int) -> a
    int getLineWidth(int) -> a
    void removeLine(int) -> a
